; ==================================================================
; kerninit.asm
; ==================================================================
; The Wagner Operating System Kernel
; Written by David Wagner
;
; Initialize the kernel
; ==================================================================

;*****************************************************************
; Start of Program - Use 16 bit mode
;*****************************************************************

	BITS 16


;*****************************************************************
;*****************************************************************
; Start of Main Kernel Program
;*****************************************************************
;*****************************************************************

;*****************************************************************
;  Constant memory locations
;*****************************************************************

%define StackSegmentStart 0
%define StackPointerStart 0FFFFh
%define DataSegmentStart 2000h


;*********************************************************************
; Kernel Initialization
;*********************************************************************

kernel_init:
	; ------------------------------------------------------------------
	; Initialize the Stack Segment Register and Stack Pointer
	; ------------------------------------------------------------------

	cli			; Disable Interrupts
	mov ax, StackSegmentStart
	mov ss, ax
	mov sp, StackPointerStart
	sti			; Enable Interrupts

	cld			; String Operations Increment

	; ------------------------------------------------------------------
	; Initialize all other Segement Registers
	; ------------------------------------------------------------------

	mov ax, DataSegmentStart
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax

	; ------------------------------------------------------------------
	; Jump to the main procedure of the kernel
	; ------------------------------------------------------------------

	jmp kernel_main

;*********************************************************************

; After Initialization, memory looks like this:
;
; -------------- <------ 0000h <------ SS <------ Stack Segement
; |            |
; |            |
; |            |
; -------------- <------ 07C0h 
; |            |
; | Bootloader |
; |            |
; -------------- <------ 09C0h 
; |            |
; | Bootloader |
; |   Memory   |
; |            |
; -------------- <------ 19E0h 
; |            |
; -------------- <------ 2000h <------ DS, ES, FS, GS <-- Segments
; |            |
; |   Kernel   |
; |            |
; -------------- 
; |            |
; -------------- 
; |            |
; |   Kernel   |
; |   Memory   |
; |            |
; -------------- <------ FFFFh <------ SS + SP <------ Stack Pointer




